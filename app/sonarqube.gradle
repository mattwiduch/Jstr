// Specify the flavor once and dynamically adapt paths to it
def flavor = "develop" // lowercase
def Flavor = "Develop" // camelcase

sonarqube {
    // Avoid false warnings from Android Studio by using noinspection
    //noinspection GroovyAssignabilityCheck
    properties {
        // Set paths to project's libraries and binaries
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-24/*.jar," +
                "$project.buildDir/intermediates/**/*.jar,"
        def binaries = "$project.buildDir/intermediates/classes/${flavor}/debug"

        property "sonar.java.binaries", binaries
        property "sonar.java.libraries", libraries
        property "sonar.java.test.binaries", binaries
        property "sonar.java.test.libraries", libraries

        // Set SCM provider to Git
        property "sonar.scm.provider", "git"

        // Set path to coverage reports
        property "sonar.jacoco.reportPath",
                "$project.buildDir/jacoco/test${Flavor}DebugUnitTest.exec"
        property "sonar.java.coveragePlugin", "jacoco"
        // Set path to junit reports
        property "sonar.junit.reportsPath", "$project.buildDir/test-results/${flavor}Debug"
        // Set path to lint reports
        property "sonar.android.lint.report",
                "$project.buildDir/outputs/lint-results-${flavor}Debug.xml"
    }
}

/* Runs sonarqube inspection and all dependant tasks */
import org.gradle.internal.os.OperatingSystem;

task runSonar(type: Exec) {
    workingDir "./"
    def command = "../gradlew"
    if (OperatingSystem.current().isWindows()) {
        command = command + ".bat"
    }
    commandLine command, "clean", "assemble${Flavor}Debug", "assembleAndroidTest",
            "lint${Flavor}Debug", "jacocoTest${Flavor}DebugUnitTestReport"
}

runSonar.finalizedBy(rootProject.tasks["sonarqube"])