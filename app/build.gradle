apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'

// Add signing config, if exists
if (project.hasProperty("RedRay.signing")
        && new File(project.property("RedRay.signing") + ".gradle").exists()) {
    apply from: project.property("RedRay.signing") + ".gradle";
}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.0"

    defaultConfig {
        applicationId 'eu.redray.jstr'
        minSdkVersion 15
        targetSdkVersion 24
        versionName androidGitVersion.name()
        multiDexEnabled true
    }
    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled false
        }
        release {
            testCoverageEnabled false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        develop {
            // currently nothing special here
        }
        free {
            // TODO
        }
        paid {
            // TODO
        }
    }
    dexOptions {
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "2g"
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:24.0.0'
    compile 'com.android.support:support-annotations:24.0.0'
    compile 'com.android.support:multidex:1.0.1'
    // Added for AdMob
    compile 'com.google.android.gms:play-services:9.2.1'
    compile project(':lib-jokes')
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

// Specify the flavor once and dynamically adapt paths to it
def flavor = "develop" // lowercase
def Flavor = "Develop" // camelcase

sonarqube {
    // Avoid false warnings from Android Studio by using noinspection
    //noinspection GroovyAssignabilityCheck
    properties {
        // Set paths to project's libraries and binaries
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-24/*.jar," +
                "$project.buildDir/intermediates/**/*.jar,"
        def binaries = "$project.buildDir/intermediates/classes/${flavor}/debug"

        property "sonar.java.binaries", binaries
        property "sonar.java.libraries", libraries
        property "sonar.java.test.binaries", binaries
        property "sonar.java.test.libraries", libraries

        // Set SCM provider to Git
        property "sonar.scm.provider", "git"

        // Set path to coverage reports
        property "sonar.jacoco.reportPath",
                "$project.buildDir/jacoco/test${Flavor}DebugUnitTest.exec"
        property "sonar.java.coveragePlugin", "jacoco"
        // Set path to junit reports
        property "sonar.junit.reportsPath", "$project.buildDir/test-results/${flavor}Debug"
        // Set path to lint reports
        property "sonar.android.lint.report",
                "$project.buildDir/outputs/lint-results-${flavor}Debug.xml"
    }
}

/* Runs sonarqube inspection and all dependant tasks */
import org.gradle.internal.os.OperatingSystem;

task runSonar(type: Exec) {
    workingDir "./"
    def command = "../gradlew"
    if (OperatingSystem.current().isWindows()) {
        command = command + ".bat"
    }
    commandLine command, "clean", "assemble${Flavor}Debug", "assembleAndroidTest",
            "lint${Flavor}Debug", "jacocoTest${Flavor}DebugUnitTestReport"
}

runSonar.finalizedBy(rootProject.tasks["sonarqube"])